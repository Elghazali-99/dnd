<p>In Ruby on Rails, I'm attempting to update the <code>innerHTML</code> of a div tag using the <code>form_remote_tag</code> helper.  This update happens whenever an associated select tag receives an onchange event.  The problem is, <code>&lt;select onchange="this.form.submit();"&gt;</code>; doesn't work.  Nor does <code>document.forms[0].submit()</code>.  The only way to get the onsubmit code generated in the form_remote_tag to execute is to create a hidden submit button, and invoke the click method on the button from the select tag.  Here's a working ERb partial example.</p>

<pre><code>&lt;% form_remote_tag :url =&gt; product_path, :update =&gt; 'content', :method =&gt; 'get' do -%&gt;
  &lt;% content_tag :div, :id =&gt; 'content' do -%&gt;
    &lt;%= select_tag :update, options_for_select([["foo", 1], ["bar", 2]]), :onchange =&gt; "this.form.commit.click" %&gt;
    &lt;%= submit_tag 'submit_button', :style =&gt; "display: none" %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></pre>

<p>What I want to do is something like this, but it doesn't work.</p>

<pre><code>&lt;% form_remote_tag :url =&gt; product_path, :update =&gt; 'content', :method =&gt; 'get' do -%&gt;
  &lt;% content_tag :div, :id =&gt; 'content' do -%&gt;
    # the following line does not work
    &lt;%= select_tag :update, options_for_select([["foo", 1], ["bar", 2]]), :onchange =&gt; "this.form.onsubmit()" %&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></pre>

<p>So, is there any way to remove the invisible submit button for this use case?</p>

<p>There seems to be some confusion.  So, let me explain.  The basic problem is that <code>submit()</code> doesn't call the <code>onsubmit()</code> code rendered into the form.</p>

<p>The actual HTML form that Rails renders from this ERb looks like this:</p>

<pre><code>&lt;form action="/products/1" method="post" onsubmit="new Ajax.Updater('content', '/products/1', {asynchronous:true, evalScripts:true, method:'get', parameters:Form.serialize(this)}); return false;"&gt;
  &lt;div style="margin:0;padding:0"&gt;
    &lt;input name="authenticity_token" type="hidden" value="4eacf78eb87e9262a0b631a8a6e417e9a5957cab" /&gt;
  &lt;/div&gt;
  &lt;div id="content"&gt;
    &lt;select id="update" name="update" onchange="this.form.commit.click"&gt;
      &lt;option value="1"&gt;foo&lt;/option&gt;
      &lt;option value="2"&gt;bar&lt;/option&gt;
    &lt;/select&gt;
    &lt;input name="commit" style="display: none" type="submit" value="submit_button" /&gt;
  &lt;/div&gt;
&lt;/form&gt;
</code></pre>

<p>I want to axe the invisible submit button, but using a straight form.submit appears to not work.  So, I need some way to call the form's onsubmit event code.</p>

<p>Update: Orion Edwards solution would work if there wasn't a <code>return(false);</code> generated by Rails.  I'm not sure which is worse though, sending a phantom click to an invisible submit button or calling eval on the <code>getAttribute('onsubmit')</code> call after removing the return call with a javascript string replacement!   </p>