<p>How do I add an instance method to a class using a metaclass (yes I do need to use a metaclass)? The following kind of works, but the func_name will still be "foo":</p>

<pre><code>def bar(self):
    print "bar"

class MetaFoo(type):
    def __new__(cls, name, bases, dict):
        dict["foobar"] = bar
        return type(name, bases, dict)

class Foo(object):
    __metaclass__ = MetaFoo

&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.foobar()
bar
&gt;&gt;&gt; f.foobar.func_name
'bar'
</code></pre>

<p>My problem is that some library code actually uses the func_name and later fails to find the 'bar' method of the Foo instance. I could do:</p>

<pre><code>dict["foobar"] = types.FunctionType(bar.func_code, {}, "foobar")
</code></pre>

<p>There is also types.MethodType, but I need an instance that does'nt exist yet to use that. Am I missing someting here?</p>