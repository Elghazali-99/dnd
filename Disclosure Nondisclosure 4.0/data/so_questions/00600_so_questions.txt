<p>I'm sure this has already been asked and answered so I apologize in advance for that but I'm not figuring out the correct keywords to search for.  Searching for "Pattern" hits way too many Q &amp; A's to be useful.</p>

<p>I'm working on a regression testing app.  I'm displaying a form on the screen and according to which user is logged in to the app some of the fields should be read-only.  So I can abstract a field object and I can abstract a user object but what pattern should I be looking at to describe the intersection of these two concepts?  In other words how should I describe that for Field 1 and User A, the field should be read-only?  It seems like read-only (or not) should be a property of the Field class but as I said, it depends on which user is looking at the form.  I've considered a simple two-dimensional array (e. g. ReadOnly[Field,User] = True) but I want to make sure I've picked the most effective structure to represent this.    </p>

<p>Are there any software design patterns regarding this kind of data structure?  Am I overcomplicating things--would a two-dimensional array be the best way to go here?  As I said if this has been asked and answered, I do apologize.  I did search here and didn't find anything and a Google search failed to turn up anything either. </p>